<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<book lang="en">
<bookinfo>
    <title>Building Enduro/X On Oracle Solaris Platform</title>
    <date>2016-06</date>
    <author>
        <firstname>Madars</firstname>
        <surname>Vitolins</surname>
    </author>
    <authorinitials>MV</authorinitials>
<revhistory><revision><revnumber>1.0</revnumber><date>2016-06</date><authorinitials>MV</authorinitials><revremark>Initial draft</revremark></revision></revhistory>
</bookinfo>
<chapter id="_about_manual">
<title>About manual</title>
<simpara>This manual describes how to build <emphasis>Enduro/X</emphasis> Oracle Solaris platform. Document is based
on Solaris 11 on x86 machine. Compiler used to Enduro/X is GCC.</simpara>
</chapter>
<chapter id="_overview">
<title>Overview</title>
<simpara>This manual includes basic installation of Enduro/X which does not include building of
documentation and does not use GPG-ME encryption for bridges.</simpara>
<simpara>For Solaris Posix queues actually are virtual files in /tmp directory with <emphasis>.MQD</emphasis> prefix.
Enduro/X for queue management uses these files.</simpara>
</chapter>
<chapter id="_installation_process">
<title>Installation process</title>
<simpara>The installation process will install required pen source packages from <emphasis>http://www.opencsw.org</emphasis>.
you may install packages with different approach. This is just a sample process for getting
build system working on under Solaris. For getting Enduro/X to work basically we need following packages:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
git
</simpara>
</listitem>
<listitem>
<simpara>
cmake
</simpara>
</listitem>
<listitem>
<simpara>
flex
</simpara>
</listitem>
<listitem>
<simpara>
bison
</simpara>
</listitem>
<listitem>
<simpara>
libxml2
</simpara>
</listitem>
<listitem>
<simpara>
gcc/g++
</simpara>
</listitem>
</orderedlist>
<section id="_packages_to_be_installed">
<title>Packages to be installed</title>
<simpara>The following operations will be done from root user. This will download
and install open source packages to local machine:</simpara>
<screen># pkgadd -d http://get.opencsw.org/now
# /opt/csw/bin/pkgutil -U
# /opt/csw/bin/pkgutil -y -i git libxml2_dev flex bison cmake gmake</screen>
<section id="_if_installing_gcc_8230">
<title>If installing GCC&#8230;</title>
<screen># /opt/csw/bin/pkgutil -y -i gcc4core gcc4g++</screen>
</section>
<section id="_if_installing_sun_studio_on_solaris_11_8230">
<title>If installing Sun Studio (on Solaris 11)&#8230;</title>
<itemizedlist>
<listitem>
<simpara>
According to: <ulink url="https://pkg-register.oracle.com/register/product_info/6/">https://pkg-register.oracle.com/register/product_info/6/</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
Register and request access, download the
and pkg.oracle.com.key.pem pkg.oracle.com.certificate.pem from Oracle
to server.
</simpara>
</listitem>
</itemizedlist>
<screen># mkdir -m 0775 -p /var/pkg/ssl
# cp -i download-directory/pkg.oracle.com.key.pem /var/pkg/ssl
# cp -i download-directory/pkg.oracle.com.certificate.pem /var/pkg/ssl

# pkg set-publisher \
-k /var/pkg/ssl/pkg.oracle.com.key.pem \
-c /var/pkg/ssl/pkg.oracle.com.certificate.pem \
-G '*' -g https://pkg.oracle.com/solarisstudio/release solarisstudio

# pkg list -af 'pkg://solarisstudio/developer/solarisstudio-124/*'

# pkg install -nv solarisstudio-124

# pkg install solarisstudio-124</screen>
</section>
<section id="_if_installing_sun_studio_on_solaris_10_8230">
<title>If installing Sun Studio (on Solaris 10)&#8230;</title>
<simpara>Firstly download the "tarfile" version from Oracle, visit
<ulink url="http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/tarfiles-studio-12-4-3048109.html">http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/tarfiles-studio-12-4-3048109.html</ulink></simpara>
<simpara>Next once the tar file is on your server, extract it and start the install:</simpara>
<screen># bzip2 -d SolarisStudio12.4-solaris-x86-bin.tar.bz2
# tar -xf SolarisStudio12.4-solaris-x86-bin.tar
# cd SolarisStudio12.4-solaris-x86-bin
# ./install_patches.sh
# mv solarisstudio12.4 /opt</screen>
<simpara>For Solaris 10 also we need gmake to work as "make", thus</simpara>
<screen># ln -s /opt/csw/bin/gmake /usr/bin/make</screen>
<simpara>This will put the compiler in "/opt/solarisstudio12.4" the path later used in
this tutorial.</simpara>
<simpara>Also for solaris 10 we need "ar" tool which we will use from GNU package:</simpara>
<screen># /opt/csw/bin/pkgutil -y -i gcc4core gcc4g++</screen>
</section>
</section>
<section id="_getting_the_source_code">
<title>Getting the source code</title>
<simpara>Firstly we need to add "user1" under which we will perform build actions.
For test purposes we will parepare new user for which Enduro/X will built
(this adds the  in the path the /opt/csw/bin. You may modify that of your needs.
(add /opt/solarisstudio12.4/bin if Sun studio is installed)</simpara>
<section id="_adding_user_on_solaris_11">
<title>Adding user on Solaris 11</title>
<simpara>We add the user "user1" and also set the open file limit to 4096, by
default it is 256 which is too low for unit testing.</simpara>
<screen># useradd -m user1
# passwd user1
# projadd -K "process.max-file-descriptor=(basic,10000,deny)" proj.files
# usermod -K "project=proj.files" user1
# su - user1</screen>
</section>
<section id="_adding_user_on_solaris_10">
<title>Adding user on Solaris 10</title>
<screen># useradd -d /export/home/user1 -m -s /usr/bin/bash -c "User1 User1" user1
# mkdir /export/home/user1
# chown user1:staff /export/home/user1</screen>
</section>
</section>
<section id="_preparing_the_user_environment">
<title>Preparing the user environment</title>
<screen>$ bash
$ cat &lt;&lt; EOF &gt;&gt; .profile
export PATH=$PATH:/opt/csw/bin:/opt/solarisstudio12.4/bin
EOF
$ chmod +x .profile
$ source .profile
$ cd /export/home/user1
$ GIT_SSL_NO_VERIFY=true git clone https://github.com/endurox-dev/endurox
$ cd endurox
$ git config http.sslVerify "false"</screen>
</section>
<section id="_enduro_x_basic_environment_configuration_for_home_directory">
<title>Enduro/X basic Environment configuration for HOME directory</title>
<simpara>This code bellow creates <emphasis>ndrx_home</emphasis> executable file which loads basic environment,
so that you can use sample configuration provided by Enduro/X in <emphasis>sampleconfig</emphasis> directory.
This also assumes that you are going to install to <emphasis>$HOME/endurox/dist</emphasis> folder.
The file bellow will override the sample configuration.</simpara>
<screen>$ cat &lt;&lt; EOF &gt; $HOME/ndrx_home
#!/bin/bash

echo "Loading ndrx_home..."
# Where app domain lives
export NDRX_APPHOME=$HOME/endurox
# Where NDRX runtime lives
export NDRX_HOME=$HOME/endurox/dist/bin
# Debug config too
export NDRX_DEBUG_CONF=$HOME/endurox/sampleconfig/debug.conf
# NDRX config too.
export NDRX_CONFIG=$HOME/endurox/sampleconfig/ndrxconfig.xml

export PATH=$PATH:$HOME/projects/endurox/dist/bin

export FLDTBLDIR=$HOME/endurox/ubftest/ubftab

export PATH=$PATH:/opt/csw/bin:$HOME/endurox/dist/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/endurox/dist/lib64:/opt/csw/lib
# Solaris message queues live in tmp:
export NDRX_QPATH=/tmp

EOF

$ chmod +x $HOME/ndrx_home</screen>
</section>
<section id="_building_the_code_with_gcc">
<title>Building the code with GCC</title>
<simpara>It is assumed that gcc is default compiler on the system (i.e. Oracle Studio not installed),
thus following cmake will pick up gcc by default:</simpara>
<section id="_solaris_11">
<title>Solaris 11</title>
<screen>$ cd /export/home/user1/endurox
$ cmake -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CC_COMPILER=gcc\
-DDEFINE_DISABLEDOC=ON -DDEFINE_DISABLEGPGME=ON -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/dist .
$ make
$ make install</screen>
</section>
<section id="_solaris_10">
<title>Solaris 10</title>
<screen>$ cd /export/home/user1/endurox
$ cmake -D CMAKE_AR=/opt/csw/gnu/ar -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CC_COMPILER=gcc \
-DDEFINE_DISABLEDOC=ON -DDEFINE_DISABLEGPGME=ON -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/dist .
$ make
$ make install</screen>
</section>
</section>
<section id="_building_the_code_with_solaris_studio">
<title>Building the code with Solaris Studio</title>
<simpara>The compilation will be done in 64bit mode</simpara>
<section id="_solaris_11_2">
<title>Solaris 11</title>
<screen>$ cd /export/home/user1/endurox
$ cmake -DDEFINE_DISABLEDOC=ON -DDEFINE_DISABLEGPGME=ON -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/dist .</screen>
</section>
<section id="_solaris_10_2">
<title>Solaris 10</title>
</section>
</section>
</chapter>
<chapter id="_this_assumes_that_gcc_is_installed_and_ar_from_gcc_will_be_used">
<title>This assumes that GCC is installed, and "ar" from gcc will be used.</title>
<simpara>$ cd /export/home/user1/endurox
$ cmake -D CMAKE_AR=/opt/csw/gnu/ar \
-DDEFINE_DISABLEDOC=ON -DDEFINE_DISABLEGPGME=ON -DCMAKE_INSTALL_PREFIX:PATH=<literal>pwd</literal>/dist .</simpara>
<screen>cmake  -DCMAKE_CC_COMPILER=/opt/solarisstudio12.4/bin/cc \
-DCMAKE_CXX_COMPILER=/opt/solarisstudio12.4/bin/c++ \
-DDEFINE_DISABLEDOC=ON -DDEFINE_DISABLEGPGME=ON -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/dist .


== Unit Testing

Enduro/X basically consists of two parts:
. XATMI runtime;
. UBF/FML buffer processing.
Each of these two sub-systems have own units tests.

=== UBF/FML Unit testing</screen>
<simpara>$ cd /export/home/user1/endurox/sampleconfig
$ source setndrx
$ cd /export/home/user1/endurox/ubftest
$ ./ubfunit1 2&gt;/dev/null
Running "main" (76 tests)&#8230;
Completed "ubf_basic_tests": 198 passes, 0 failures, 0 exceptions.
Completed "ubf_Badd_tests": 225 passes, 0 failures, 0 exceptions.
Completed "ubf_genbuf_tests": 334 passes, 0 failures, 0 exceptions.
Completed "ubf_cfchg_tests": 2058 passes, 0 failures, 0 exceptions.
Completed "ubf_cfget_tests": 2232 passes, 0 failures, 0 exceptions.
Completed "ubf_fdel_tests": 2303 passes, 0 failures, 0 exceptions.
Completed "ubf_expr_tests": 3106 passes, 0 failures, 0 exceptions.
Completed "ubf_fnext_tests": 3184 passes, 0 failures, 0 exceptions.
Completed "ubf_fproj_tests": 3548 passes, 0 failures, 0 exceptions.
Completed "ubf_mem_tests": 4438 passes, 0 failures, 0 exceptions.
Completed "ubf_fupdate_tests": 4613 passes, 0 failures, 0 exceptions.
Completed "ubf_fconcat_tests": 4768 passes, 0 failures, 0 exceptions.
Completed "ubf_find_tests": 5020 passes, 0 failures, 0 exceptions.
Completed "ubf_get_tests": 5247 passes, 0 failures, 0 exceptions.
Completed "ubf_print_tests": 5655 passes, 0 failures, 0 exceptions.
Completed "ubf_macro_tests": 5666 passes, 0 failures, 0 exceptions.
Completed "ubf_readwrite_tests": 5764 passes, 0 failures, 0 exceptions.
Completed "ubf_mkfldhdr_tests": 5770 passes, 0 failures, 0 exceptions.
Completed "main": 5770 passes, 0 failures, 0 exceptions.</simpara>
<screen>=== XATMI Unit testing
ATMI testing might take some time. Also ensure that you have few Gigabytes of free
disk space, as logging requires some space (about ~10 GB).</screen>
<simpara>$ cd /export/home/user1/endurox/atmitest
$ nohup ./run.sh &amp;
$ tail -f /export/home/user1/endurox/atmitest/test.out
&#8230;
<emphasis role="strong"><emphasis role="strong"></emphasis></emphasis><emphasis role="strong"><emphasis role="strong"></emphasis></emphasis> FINISHED TEST: [test028_tmq/run.sh] with 0 <emphasis role="strong"><emphasis role="strong"></emphasis></emphasis><emphasis role="strong"><emphasis role="strong"></emphasis></emphasis>
Completed "atmi_test_all": 28 passes, 0 failures, 0 exceptions.
Completed "main": 28 passes, 0 failures, 0 exceptions.</simpara>
<screen>== Conclusions
At finish you have a configured system which is read to process the transactions
by Enduro/X runtime. It is possible to copy the binary version ('dist') folder
to other same architecture machines and run it there with out need of building.

:numbered!:

[bibliography]
Additional documentation</screen>
<simpara>This section lists additional related documents.</simpara>
<bibliodiv><title>Resources</title>
<bibliomixed>
<bibliomisc>
<anchor id="BINARY_INSTALL" xreflabel="[BINARY_INSTALL]"/>[BINARY_INSTALL] See Enduro/X <emphasis>binary_install</emphasis> manual.
</bibliomisc>
</bibliomixed>
</bibliodiv>
</chapter>
</book>

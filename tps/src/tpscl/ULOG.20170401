12517:20170401:12135927:xadmin      :Generate go client
-1721149039:20170401:12135927:xadmin      : 0: cltname      :XATMI Client Name (binary) [testcl]: 
-1742821114:20170401:12140431:xadmin      : 1: useubf       :Use UBF? [y]: 
-1742821114:20170401:12141035:xadmin      : 2: ubfname      :UBF package name [ubftab]: 
-1742821114:20170401:12141191:xadmin      : 3: genmake      :Gen makefile [y]: 
-1742821114:20170401:12141285:xadmin      : 4: config       :INI File section (optional, will read config if set) []: 
-1742821114:20170401:12141404:xadmin      : 0: Edit cltname      :XATMI Client Name (binary) [tpscl]: 
-1742821114:20170401:12141404:xadmin      : 1: Edit useubf       :Use UBF? [y]: 
-1742821114:20170401:12141404:xadmin      : 2: Edit ubfname      :UBF package name [ubftab]: 
-1742821114:20170401:12141404:xadmin      : 3: Edit genmake      :Gen makefile [y]: 
-1742821114:20170401:12141404:xadmin      : 4: Edit config       :INI File section (optional, will read config if set) []: 
-1742821114:20170401:12141514:xadmin      :User entered: w
-1742821114:20170401:12141514:xadmin      :Accepted
-1742821114:20170401:12141514:xadmin      :Writting off [/home/mvitolin/projects/endurox/tps/src/tpscl/tpscl.go] with [package main

import (
	"errors"
	"fmt"
	"os"
	atmi "github.com/endurox-dev/endurox-go"
	u "ubftab"
)

/*
#include <signal.h>
*/
import "C"

const (
	ProgSection = "tpscl"
)

var MSomeConfigFlag string = ""
var MSomeOtherConfigFlag int = 0

//Run the listener
func apprun(ac *atmi.ATMICtx) error {

	//Do some work here

	buf, err := ac.NewUBF(1024)

	if err != nil {
		return errors.New(err.Error());
	}
	
	//Set some field for call
	if err := buf.BChg(u.T_STRING_FLD, 0, "Hello world!"); nil != err {
		return errors.New(err.Error());
	}
	
	//Call the server
	if _, err := ac.TpCall("TESTSV", buf, 0); nil != err {
		return errors.New(err.Error());
	}
	
	//Print response
	buf.TpLogPrintUBF(atmi.LOG_DEBUG, "Got response")
	


	return nil
}

//Init function
//@param ac	ATMI context
//@return error (if erro) or nil
func appinit(ac *atmi.ATMICtx) error {

	if err := ac.TpInit(); err != nil {
		return errors.New(err.Error())
	}



	return nil
}

//Un-init & Terminate the application
//@param ac	ATMI Context
//@param restCode	Return code. atmi.FAIL (-1) or atmi.SUCCEED(0)
func unInit(ac *atmi.ATMICtx, retCode int) {

	ac.TpTerm()
	ac.FreeATMICtx()
	os.Exit(retCode)
}

//Cliet process main entry
func main() {

	ac, errA := atmi.NewATMICtx()

	if nil != errA {
		fmt.Fprintf(os.Stderr, "Failed to allocate cotnext %d:%s!\n",
			errA.Code(), errA.Message())
		os.Exit(atmi.FAIL)
	}

	if err := appinit(ac); nil != err {
		ac.TpLogError("Failed to init: %s", err)
		os.Exit(atmi.FAIL)
	}

	ac.TpLogWarn("Init complete, processing...")

	if err := apprun(ac); nil != err {
		unInit(ac, atmi.FAIL)
	}

	unInit(ac, atmi.SUCCEED)
}

]
-1742821114:20170401:12141514:xadmin      :Writting off [/home/mvitolin/projects/endurox/tps/src/tpscl/Makefile] with [
SOURCEDIR=.
SOURCES := $(shell find $(SOURCEDIR) -name '*.go')

BINARY=tpscl
LDFLAGS=

VERSION=1.0.0
BUILD_TIME=`date +%FT%T%z`

.DEFAULT_GOAL: $(BINARY)

$(BINARY): $(SOURCES)
	go build ${LDFLAGS} -o ${BINARY} *.go

.PHONY: install
install:
	go install ${LDFLAGS} ./...

.PHONY: clean
clean:
	if [ -f ${BINARY} ] ; then rm ${BINARY} ; fi
]

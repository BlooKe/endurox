#!/usr/bin/pscript 

print("    ______          __                    ___  __\n");
print("   / ____/___  ____/ /_  ___________    _/_/ |/ /\n");
print("  / __/ / __ \\/ __  / / / / ___/ __ \\ _/_/ |   / \n");
print(" / /___/ / / / /_/ / /_/ / /  / /_/ //_/  /   |  \n");
print("/_____/_/ /_/\\__,_/\\__,_/_/   \\____/_/   /_/|_|  \n");
print("\n");
print("                     Provision\n");
print("\n");

/*
TODO:


////////////////////////////////////////////////////////////////////////////////
// Install base
////////////////////////////////////////////////////////////////////////////////
class InstallBase {

	function CheckLimits() {
	
	}
	
	
	function CheckLimits() {
		
	}
	
	function IsInstallNeeded() {
	
	}
	
	
	function InstallLimits() {
	
	}

}

////////////////////////////////////////////////////////////////////////////////
// Linux Install 
////////////////////////////////////////////////////////////////////////////////
class InstallLinux extends InstallBase {

	function CheckLimits() {
	
		::print("Checking Linux limits...\n");
	}
	
	function IsInstallNeeded() {
	
	}
	
	
	function InstallLimits() {
	
	}
	
}
*/

//Provision class
class Provision {

	//Should come from packages
	osType = "";
	
	//Queue type...
	qType = "";
	
	//Get some random number...
	</ order=1, name = "Cluster node id", type = "number", min=1, max=32 /> 
	qprefix = "1";
	
	</ order=2, name = "System code (prefix/setfile name, etc)", type = "ans",
                min=1, max=4, regex="[A-Za-z0-9]+"/> 
	qprefix = "exrun";
	
	</ order=3, name = "Setup sample XA config", type = "yn"/> 
	sampleXA = "n";
	
	</ order=4, name = "Application home", type = "ans", min=1, max=512, regex="^/" /> 
	appHome = "";
	
	</ order=5, name = "Register application at OS startup (rc.local)", type = "yn"/> 
	regStartup = "n";
	
	//If starts with '/' - then assume that it is full path...
	</ order=6, name = "Executables/binaries sub-folder of Apphome", type = "path"/> 
	binDir = "bin";
	
	</ order=7, name = "Configuration sub-folder of Apphome", type = "path"/> 
	binDir = "conf";
	
	</ order=8, name = "Log sub-folder of Apphome", type = "path"/> 
	confDir = "conf";
	
	</ order=9, name = "Log sub-folder of Apphome", type = "path"/> 
	logDir = "log";
	
	</ order=10, name = "Temp sub-dir (used for pid file)", type = "path"/> 
	tempDir = "tmp";
	
	</ order=11, name = "System wide tpcall() timeout", type = "n"/> 
	timeout = "60";
	
	</ order=12, name = "Install sample queue configuration", type = "yn"/> 
	installQ = "y";
	
	</ order=13, name = "Install event server", type = "yn"/> 
	eventSv = "y";
	
	</ order=14, name = "Configure Client Process Monitor Server", type = "yn"/> 
	eventSv = "y";
	
	</ order=15, name = "Install Configuration server", type = "yn"/> 
	configSv = "y";
	
	</ order=16, name = "Install bridge connection", type = "yn"/> 
	bridge = "y";
	
	</ order=17, name = "Bridge -> Role: Active(a) or passive(p)?", type = "regex", 
                regex="a?p?", depend="::prov.bridge==\"y\""/> 
	bridgeRole = "a";

	</ order=18, name = "Bridge -> IP: Listen address", type = "regex", 
                regex="^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$", depend="(::prov.bridge==\"y\" && ::prov.bridgeRole==\"p\")"/> 
	ipl = "0.0.0.0";
	
	</ order=19, name = "Bridge -> IP: Connect to", type="regex", regex="^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$", 
                depend="(::prov.bridge==\"y\" && ::prov.bridgeRole==\"a\")"/> 
	ipc = "172.0.0.1";
	
	</ order=20, name = "Bridge -> IP: Port number", type="number", min=0, max=65000, 
                depend="(::prov.bridge==\"y\")" /> 
	port = "21003";
	
	</ order=21, name = "CCTag (use if set)", type="string", min=0, max=8 /> 
	cctag = "";
	
	//Install handler
	install = null;
	
	//This is constructor, we shall get some infos from Enduro/X base build
	constructor() {
		osType = "LINUX";
		qType = "posixq";
		
		//Set app home to pwd
		appHome = getcwd();
/*		
		if (osType == "LINUX") {
			install = InstallLinux();
		}
*/
	}
}

local root = getroottable()

//Create a provision object
root["prov"] <- Provision();


print("Compiled system type....: " + ::prov.osType + "\n");
print("Queueing mechanism......: " + ::prov.qType + "\n");
print("\n");

local maxMembSize = 12;

//prov.install.CheckLimits();


//TODO: Load all class members into array, index by order
//And sort the array, then go over the array to print the questions...


//Run the wizzard...
//Iterate over the all paramters
foreach(member,val in Provision)
{
	local attr;
	
	attr = Provision.getattributes(member);
	
	if (null!=attr)
	{		
                //Check that dependency is ok
                local ask = 1;
                if (attr.rawin("depend"))
                {
                    local compiledscript = compilestring("return "+attr["depend"]+";");

                    ask = compiledscript();

                    //print("Expr ["+attr["depend"]+"] result: "+ask+"\n");
                }
            
                if (ask)
                {
                    ::print(format("%-12s :%s [%s]: ", member, attr["name"], prov[member]));

                    local new_val  = getline();

                    switch (attr["type"])
                    {
                            case "ans":
                                    print("This is ans...\n");
                            break;
                    }

                    ::prov[member] = new_val;
                }
		
		//Validate input...
	}
	
	/*
	print("Input: "+member+"\n");
	if((attr = Provision.getattributes(member)) != null) {
		foreach(i,v in attr)
		{
			::print("\t"+i+" = "+(typeof v)+"\n");
		}
	}
	*/
}







#!/usr/bin/pscript

userlog("Generate go server");

//Include wizzard base.
compilestring(getwizzardbase())();

//Provision class
class GoServer extends WizzardBase {

	constructor()
	{
		base.constructor();
	}
	

	//Configure it:
	</ order=0, name = "XATMI Server Name (binary)", type = "string", min=1, max=512 /> 
	svname = "testsv";
	
	</ order=1, name = "Service name", type = "string", min=1, max=32 /> 
	svcname = "TESTSVC";
	
	</ order=2, name = "Use UBF?", type = "yn"/> 
	useubf = "y";
	
	</ order=3, name = "UBF package name", 
		type = "path" depend="(::prov.useubf==\"y\")" /> 
	ubfname = "ubftab";
	
	</ order=4, name = "Gen makefile", type = "yn"/> 
	genmake = "y";
	
	
	goServerFile = "";
	
	makeFile = "";
	
	function getOutputFiles()
	{
		goServerFile=appHome+"/"+svname+".go";
		makeFile=appHome+"/Makefile";
	}
	
	////////////////////////////////////////////////////////////////////////
	//Build the ndrxconfig value
	////////////////////////////////////////////////////////////////////////
	goServerVal = "";
	function buildServer()
	{
	
		goServerVal = @"package main

import (
	atmi ""github.com/endurox-dev/endurox-go""
	""fmt""
	""os""
"+(useubf?"\t\""+ubfname+"\"\n":"")+@")

const (
	SUCCEED = 0
	FAIL    = -1
)

//"+svcname+@" service
//@param ac ATMI Context
//@param svc Service call information
func "+svcname+@"(ac *atmi.ATMICtx, svc *atmi.TPSVCINFO) {

	ret := SUCCEED
	
	//Return to the caller
	defer func() {

		ac.TpLogCloseReqFile()
		if SUCCEED == ret {
			ac.TpReturn(atmi.TPSUCCESS, 0, &svc.Data, 0)
		} else {
			ac.TpReturn(atmi.TPFAIL, 0, &svc.Data, 0)
		}
	}()
	
	"+(useubf?@"
	//Get UBF Handler
	ub, _ := ac.CastToUBF(&svc.Data)

	//Print the buffer to stdout
	//fmt.Println(""Incoming request:"")
	ub.TpLogPrintUBF(atmi.LOG_DEBUG, ""Incoming request:"")

	//Resize buffer, to have some more space
	if err := ub.TpRealloc(1024); err != nil {
		ac.TpLogError(""TpRealloc() Got error: %d:[%s]\n"", err.Code(), err.Message())
		ret = FAIL
		return
	}":"")+@"
	
	
	//TODO: Run your processing here, and keep the succeed or fail status in 
	//in ""ret"" flag.

	return
}

//Server init, called when process is booted
//@param ac ATMI Context
func Init(ac *atmi.ATMICtx) int {

	ac.TpLogWarn(""Doing server init..."");
	//Advertize TESTSVC
	if err := ac.TpAdvertise("""+svcname+@""", """+svcname+@""", "+svcname+@"); err != nil {
		fmt.Println(err)
		return atmi.FAIL
	}

	return atmi.SUCCEED
}

//Server shutdown
//@param ac ATMI Context
func Uninit(ac *atmi.ATMICtx) {
	ac.TpLogWarn(""Server is shutting down..."");
}

//Executable main entry point
func main() {
	//Have some context
	ac, err := atmi.NewATMICtx()

	if nil != err {
		fmt.Errorf(""Failed to allocate context!"", err)
		os.Exit(atmi.FAIL)
	} else {
		//Run as server
		ac.TpRun(Init, Uninit)
	}
}
";	
	}

	////////////////////////////////////////////////////////////////////////
	//Server END
	////////////////////////////////////////////////////////////////////////
	
	
	////////////////////////////////////////////////////////////////////////
	//Build makefile
	////////////////////////////////////////////////////////////////////////
	
	makeFileVal = "";
	function buildMakefile()
	{
	
		makeFileVal = @"
SOURCEDIR=.
SOURCES := $(shell find $(SOURCEDIR) -name '*.go')

BINARY="+svname+@"
LDFLAGS=

VERSION=1.0.0
BUILD_TIME=`date +%FT%T%z`

.DEFAULT_GOAL: $(BINARY)

$(BINARY): $(SOURCES)
	go build ${LDFLAGS} -o ${BINARY} *.go

.PHONY: install
install:
	go install ${LDFLAGS} ./...

.PHONY: clean
clean:
	if [ -f ${BINARY} ] ; then rm ${BINARY} ; fi
";
	}
	
	
	////////////////////////////////////////////////////////////////////////
	//Build makefile, END
	////////////////////////////////////////////////////////////////////////
	
}
	

//Run the mater installer
function install() 
{
	local root = getroottable();

	//Create a provision object
	root["prov"] <- GoServer();

	if (!::prov.isDefaulted)
	{
		::prov.runInteractive();
	}

	if (::prov.validatAndPrintConfig())
	{
		::prov.getOutputFiles();
		::prov.buildServer();

		if (!::prov.writeFile(::prov.goServerFile, ::prov.goServerVal))
		{
			return false;
		}
		
		//Build makefile if needed...
		if ("y"==::prov.genmake)
		{
			::prov.buildMakefile();
			
			if (!::prov.writeFile(::prov.makeFile, ::prov.makeFileVal))
			{
				return false;
			}
		}
	}
	else
	{
		return false;
	}

	return true;
}

if (::install())
{
	print("Go server gen ok!\n");
	
	return 0;
}
else
{
	print("Go server gen failed!\n");
	return -1;
}
